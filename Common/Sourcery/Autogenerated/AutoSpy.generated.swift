// Generated using Sourcery 0.18.0 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// swiftlint:disable all
// This file is autogenerated, so disable all swift lint rules here.
import Foundation
import Combine
import UIKit
@testable import WeatherApp

// MARK: Spy for CityListProviderProtocol
public class SpyCityListProviderProtocol: CityListProviderProtocol, TestSpy {
	public enum Method: Equatable {
        case save(city: City)
        case deleteCity(index: Int)
        case moveCity(from: Int, to: Int)
	}

    public var cities: [City] = []
    public var storage: CityStorage {
        get { return underlyingStorage }
        set(value) { underlyingStorage = value }
    }
    public var underlyingStorage: CityStorage!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func save(city: City) throws {
        callstack.record(.save(city: city ))
    }
    public func deleteCity(at index: Int) throws {
        callstack.record(.deleteCity(index: index ))
    }
    public func moveCity(from: Int, to: Int) throws {
        callstack.record(.moveCity(from: from , to: to ))
    }
}

// MARK: Spy for CityListViewModelProtocol
public class SpyCityListViewModelProtocol: CityListViewModelProtocol, TestSpy {
	public enum Method: Equatable {
        case deleteCity(index: Int)
        case moveCity(from: Int, to: Int)
        case presentCitySearch
        case presentForecast(city: City)
        case didPressTWC
	}

    public var cities: [City] = []
    public var unitTemperature: UnitTemperature {
        get { return underlyingUnitTemperature }
        set(value) { underlyingUnitTemperature = value }
    }
    public var underlyingUnitTemperature: UnitTemperature!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func deleteCity(at index: Int) throws {
        callstack.record(.deleteCity(index: index ))
    }
    public func moveCity(from: Int, to: Int) throws {
        callstack.record(.moveCity(from: from , to: to ))
    }
    public func presentCitySearch() {
        callstack.record(.presentCitySearch)
    }
    public func presentForecast(for city: City) {
        callstack.record(.presentForecast(city: city ))
    }
    public func didPressTWC() {
        callstack.record(.didPressTWC)
    }
}

// MARK: Spy for CityStorage
public class SpyCityStorage: CityStorage, TestSpy {
	public enum Method: Equatable {
        case save(city: City)
        case deleteCity(index: Int)
        case moveCity(from: Int, to: Int)
	}

    public var cities: [City] = []

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func save(city: City) throws {
        callstack.record(.save(city: city ))
    }
    public func deleteCity(at index: Int) throws {
        callstack.record(.deleteCity(index: index ))
    }
    public func moveCity(from: Int, to: Int) throws {
        callstack.record(.moveCity(from: from , to: to ))
    }
}

// MARK: Spy for WeatherProviderProtocol
public class SpyWeatherProviderProtocol: WeatherProviderProtocol, TestSpy {
	public enum Method: Equatable {
        case isSaved(city: City)
        case save(city: City)
        case forecast(city: City)
	}

    public var apiClient: APIClientProtocol {
        get { return underlyingApiClient }
        set(value) { underlyingApiClient = value }
    }
    public var underlyingApiClient: APIClientProtocol!
    public var storage: CityStorage {
        get { return underlyingStorage }
        set(value) { underlyingStorage = value }
    }
    public var underlyingStorage: CityStorage!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public var isSavedResult: Bool!
    public func isSaved(city: City) -> Bool {
        callstack.record(.isSaved(city: city ))
        return isSavedResult
    }
    public func save(city: City) throws {
        callstack.record(.save(city: city ))
    }
    public var forecastResult: AnyPublisher<OpenWeatherResponse, APIClientError<OpenWeatherAPIError>>!
    public func forecast(for city: City) -> AnyPublisher<OpenWeatherResponse, APIClientError<OpenWeatherAPIError>> {
        callstack.record(.forecast(city: city ))
        return forecastResult
    }
}

// MARK: Spy for WireframeProtocol
public class SpyWireframeProtocol: WireframeProtocol, TestSpy {
	public enum Method: Equatable {
        case presentMainScreen
        case presentCityList
        case presentCitySearch
        case presentForecast(city: City)
        case presentTWCWeb
        case didPressCityListButton
	}

    public var window: UIWindow {
        get { return underlyingWindow }
        set(value) { underlyingWindow = value }
    }
    public var underlyingWindow: UIWindow!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func presentMainScreen() {
        callstack.record(.presentMainScreen)
    }
    public func presentCityList() {
        callstack.record(.presentCityList)
    }
    public func presentCitySearch() {
        callstack.record(.presentCitySearch)
    }
    public func presentForecast(for city: City) {
        callstack.record(.presentForecast(city: city ))
    }
    public func presentTWCWeb() {
        callstack.record(.presentTWCWeb)
    }
    public func didPressCityListButton() {
        callstack.record(.didPressCityListButton)
    }
}


