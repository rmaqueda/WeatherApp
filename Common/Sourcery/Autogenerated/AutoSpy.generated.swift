// Generated using Sourcery 0.18.0 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// swiftlint:disable all
// This file is autogenerated, so disable all swift lint rules here.
import Foundation
import Combine
import UIKit
import MapKit
@testable import WeatherApp

// MARK: Spy for CityListViewModelProtocol
public class SpyCityListViewModelProtocol: CityListViewModelProtocol, TestSpy {
	public enum Method: Equatable {
        case toggleTemperatureUnit
        case deleteCity(index: Int)
        case moveCity(from: Int, to: Int)
        case presentCitySearch
        case presentForecast(city: City)
        case didPressTWC
	}

    public var cities: [City] = []
    public var temperatureUnit: TemperatureUnit {
        get { return underlyingTemperatureUnit }
        set(value) { underlyingTemperatureUnit = value }
    }
    public var underlyingTemperatureUnit: TemperatureUnit!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func toggleTemperatureUnit() throws {
        callstack.record(.toggleTemperatureUnit)
    }
    public func deleteCity(at index: Int) throws {
        callstack.record(.deleteCity(index: index ))
    }
    public func moveCity(from: Int, to: Int) throws {
        callstack.record(.moveCity(from: from , to: to ))
    }
    public func presentCitySearch() {
        callstack.record(.presentCitySearch)
    }
    public func presentForecast(for city: City) {
        callstack.record(.presentForecast(city: city ))
    }
    public func didPressTWC() {
        callstack.record(.didPressTWC)
    }
}

// MARK: Spy for CitySearchProviderProtocol
public class SpyCitySearchProviderProtocol: CitySearchProviderProtocol, TestSpy {
	public enum Method: Equatable {
        case searchCities(searchText: String)
        case searchCity(index: Int)
	}


    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func searchCities(searchText: String, completionHandler: @escaping ([MKLocalSearchCompletion]) -> Void) {
        callstack.record(.searchCities(searchText: searchText ))
    }
    public func searchCity(at index: Int, completionHandler: @escaping (City) -> Void) {
        callstack.record(.searchCity(index: index ))
    }
}

// MARK: Spy for CitySearchViewModelProtocol
public class SpyCitySearchViewModelProtocol: CitySearchViewModelProtocol, TestSpy {
	public enum Method: Equatable {
        case searchCities(searchText: String)
        case didSelectCity(index: Int)
	}

    public var cities: [NSAttributedString] = []
    public var citiesPublisher: Published<[NSAttributedString]>.Publisher {
        get { return underlyingCitiesPublisher }
        set(value) { underlyingCitiesPublisher = value }
    }
    public var underlyingCitiesPublisher: Published<[NSAttributedString]>.Publisher!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func searchCities(searchText: String) {
        callstack.record(.searchCities(searchText: searchText ))
    }
    public func didSelectCity(at index: Int) {
        callstack.record(.didSelectCity(index: index ))
    }
}

// MARK: Spy for UserPreferencesProtocol
public class SpyUserPreferencesProtocol: UserPreferencesProtocol, TestSpy {
	public enum Method: Equatable {
        case save(city: City)
        case deleteCity(index: Int)
        case moveCity(from: Int, to: Int)
        case toggleTemperatureUnit
	}

    public var cities: [City] = []
    public var temperatureUnit: TemperatureUnit {
        get { return underlyingTemperatureUnit }
        set(value) { underlyingTemperatureUnit = value }
    }
    public var underlyingTemperatureUnit: TemperatureUnit!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func save(city: City) throws {
        callstack.record(.save(city: city ))
    }
    public func deleteCity(at index: Int) throws {
        callstack.record(.deleteCity(index: index ))
    }
    public func moveCity(from: Int, to: Int) throws {
        callstack.record(.moveCity(from: from , to: to ))
    }
    public func toggleTemperatureUnit() throws {
        callstack.record(.toggleTemperatureUnit)
    }
}

// MARK: Spy for WeatherProviderProtocol
public class SpyWeatherProviderProtocol: WeatherProviderProtocol, TestSpy {
	public enum Method: Equatable {
        case isSaved(city: City)
        case save(city: City)
        case forecast(city: City)
	}


    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public var isSavedResult: Bool!
    public func isSaved(city: City) -> Bool {
        callstack.record(.isSaved(city: city ))
        return isSavedResult
    }
    public func save(city: City) throws {
        callstack.record(.save(city: city ))
    }
    public var forecastResult: AnyPublisher<OpenWeatherResponse, APIClientError<OpenWeatherAPIError>>!
    public func forecast(for city: City) -> AnyPublisher<OpenWeatherResponse, APIClientError<OpenWeatherAPIError>> {
        callstack.record(.forecast(city: city ))
        return forecastResult
    }
}

// MARK: Spy for WeatherViewModelProtocol
public class SpyWeatherViewModelProtocol: WeatherViewModelProtocol, TestSpy {
	public enum Method: Equatable {
        case saveCity
        case updateCity
        case requestForecast
        case didPressCityList
        case didPressTWC
	}

    public var dataSource: WeatherViewModelData {
        get { return underlyingDataSource }
        set(value) { underlyingDataSource = value }
    }
    public var underlyingDataSource: WeatherViewModelData!
    public var dataSourcePublisher: Published<WeatherViewModelData>.Publisher {
        get { return underlyingDataSourcePublisher }
        set(value) { underlyingDataSourcePublisher = value }
    }
    public var underlyingDataSourcePublisher: Published<WeatherViewModelData>.Publisher!
    public var isSaved: Bool {
        get { return underlyingIsSaved }
        set(value) { underlyingIsSaved = value }
    }
    public var underlyingIsSaved: Bool!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func saveCity() throws {
        callstack.record(.saveCity)
    }
    public func updateCity() throws {
        callstack.record(.updateCity)
    }
    public func requestForecast() {
        callstack.record(.requestForecast)
    }
    public func didPressCityList() {
        callstack.record(.didPressCityList)
    }
    public func didPressTWC() {
        callstack.record(.didPressTWC)
    }
}

// MARK: Spy for WireframeProtocol
public class SpyWireframeProtocol: WireframeProtocol, TestSpy {
	public enum Method: Equatable {
        case presentMainScreen
        case presentCityList
        case presentCitySearch
        case presentForecast(city: City)
        case presentTWCWeb
        case didPressCityListButton
	}

    public var window: UIWindow {
        get { return underlyingWindow }
        set(value) { underlyingWindow = value }
    }
    public var underlyingWindow: UIWindow!

    public var callstack = CallstackContainer<Method>()

    public init() {
        // Intentionally unimplemented
    }

    public func presentMainScreen() {
        callstack.record(.presentMainScreen)
    }
    public func presentCityList() {
        callstack.record(.presentCityList)
    }
    public func presentCitySearch() {
        callstack.record(.presentCitySearch)
    }
    public func presentForecast(for city: City) {
        callstack.record(.presentForecast(city: city ))
    }
    public func presentTWCWeb() {
        callstack.record(.presentTWCWeb)
    }
    public func didPressCityListButton() {
        callstack.record(.didPressCityListButton)
    }
}


